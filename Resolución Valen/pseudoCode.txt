class Local{
    List<Venta> historialVentas;
    Bool esDeFecha(Venta venta, LocalDate fechaBuscada){
        return venta.getFecha().compareTo(fechaBuscada)==0
    }
    Double gananciaFecha(LocalDate fechaBuscada){
        return historialVentas
                .filter(venta -> esDeFecha(venta, fechaBuscada))
                .sum(venta -> venta.precioFinal())
    }
}

class Venta{
  List<Item> items;
  MedioDePago mediodepago;
  LocalDate fecha

  LocalDate getFecha(){return fecha;}

  Double precioFinal(){
    return items.sum(item -> item.precioItem());
  }
}

class Item{
  Prenda prenda;
  int cantidad;
  Double precioItem(){
    return prenda*cantidad;
  }
}

enum TipoPrenda{
    Saco
    Pantalon
    Camisa
}

class Prenda{
  TipoPrenda tipoPrenda;
  Double precioBase;
  Estado estado;
  Double precioPrenda(){
    return estado.modificarPrecio(precioBase);
  }
}

interface Estado{
  Double modificarPrecio(Double);
}

class EstadoNueva implements Estado{
    Double modificarPrecio(Double precio){
        return precio;
    }
}

class EstadoPromo implements Estado{
    Double descuentoFijo
    Double modificarPrecio(Double precio){
        return precio-descuentoFijo;
    }
}

class EstadoLiqui implements Estado{
    Double modificarPrecio(Double precio){
        return precio*0.5;
    }
}

interface MedioDePago{
  Double modificarPrecio(Double)
}

class PagoEfectivo implements MedioDePago{
    Double modificarPrecio(Double precio){
        return precio
    }
}

class PagoTarjeta implements MedioDePago{
  int cantCuotas;
  Double coeficienteFijo
  Double modificarPrecio(Double precio){
    return precio * 1.01 + cantCuotas * coeficienteFijo
  }
}